{
   "output": "***** Tests Summary *****\n[push_back tests] 9 / 9\n[Range tests] 22 / 22\n[Capacity tests] 5 / 5\n[Copy tests] 7 / 7\n[Deletion tests] 8 / 8\n[Destructor tests] 3 / 3\n[Empty tests] 5 / 5\n\nTotal: 59 / 59\n",
   "tests": [
      {
         "max_score": 9,
         "name": "push_back tests",
         "output": "[Info] Instance created\n[Info] Make a vector with push_back calls :: Adjusting points possible to 2\n[Info] Size should be 500 after push_back 500 elements.(500 == 500) :: Adjusting points possible to 3\n[OK] Adjusting points from 0 to 1 (1) because: Size should be 500 after push_back 500 elements.(500 == 500) :: Assertion is true\n[Info] Check capacity(512 == 512) :: Adjusting points possible to 4\n[OK] Adjusting points from 1 to 2 (1) because: Check capacity(512 == 512) :: Assertion is true\n[Info] Check capacity(512 == 512) :: Adjusting points possible to 5\n[OK] Adjusting points from 2 to 3 (1) because: Check capacity(512 == 512) :: Assertion is true\n[Info] Check capacity(1024 == 1024) :: Adjusting points possible to 6\n[OK] Adjusting points from 3 to 4 (1) because: Check capacity(1024 == 1024) :: Assertion is true\n[Info] Size should be 513 after additional pushes(513 == 513) :: Adjusting points possible to 7\n[OK] Adjusting points from 4 to 5 (1) because: Size should be 513 after additional pushes(513 == 513) :: Assertion is true\n[Info] Size should be 1100 after push_back 1100 elements.(1100 == 1100) :: Adjusting points possible to 8\n[OK] Adjusting points from 5 to 6 (1) because: Size should be 1100 after push_back 1100 elements.(1100 == 1100) :: Assertion is true\n[Info] Check capacity(2048 == 2048) :: Adjusting points possible to 9\n[OK] Adjusting points from 6 to 7 (1) because: Check capacity(2048 == 2048) :: Assertion is true\n[OK] Adjusting points from 7 to 9 (2) because: Make a vector with push_back calls :: Exception wasn't encountered.\n",
         "score": 9
      },
      {
         "max_score": 22,
         "name": "Range tests",
         "output": "[Info] Instance created\n[Info] Grab invalid index :: Adjusting points possible to 1\n[OK] Adjusting points from 0 to 1 (1) because: Grab invalid index :: Exception was encountered ==> ERROR: Index out of bounds.\n[Info] Grab invalid index :: Adjusting points possible to 2\n[OK] Adjusting points from 1 to 2 (1) because: Grab invalid index :: Exception was encountered ==> ERROR: Index out of bounds.\n[Info] Grab some values :: Adjusting points possible to 3\n[Info] Check for correct number at index 0(-50 == -50) :: Adjusting points possible to 4\n[OK] Adjusting points from 2 to 3 (1) because: Check for correct number at index 0(-50 == -50) :: Assertion is true\n[Info] Check for correct number at index 35(20 == 20) :: Adjusting points possible to 5\n[OK] Adjusting points from 3 to 4 (1) because: Check for correct number at index 35(20 == 20) :: Assertion is true\n[Info] Check for correct number at index 99(148 == 148) :: Adjusting points possible to 6\n[OK] Adjusting points from 4 to 5 (1) because: Check for correct number at index 99(148 == 148) :: Assertion is true\n[OK] Adjusting points from 5 to 6 (1) because: Grab some values :: Exception wasn't encountered.\n[Info] Insert at invalid index :: Adjusting points possible to 7\n[OK] Adjusting points from 6 to 7 (1) because: Insert at invalid index :: Exception was encountered ==> ERROR: Index out of bounds.\n[Info] Insert at invalid index 101 :: Adjusting points possible to 8\n[OK] Adjusting points from 7 to 8 (1) because: Insert at invalid index 101 :: Exception was encountered ==> ERROR: Index out of bounds.\n[Info] Grab invalid index :: Adjusting points possible to 9\n[Info] Check for correct number at index 76(102 == 102) :: Adjusting points possible to 10\n[OK] Adjusting points from 8 to 9 (1) because: Check for correct number at index 76(102 == 102) :: Assertion is true\n[Info] Check for correct number at index 77(22 == 22) :: Adjusting points possible to 11\n[OK] Adjusting points from 9 to 10 (1) because: Check for correct number at index 77(22 == 22) :: Assertion is true\n[Info] Check for correct number at index 78(104 == 104) :: Adjusting points possible to 12\n[OK] Adjusting points from 10 to 11 (1) because: Check for correct number at index 78(104 == 104) :: Assertion is true\n[OK] Adjusting points from 11 to 12 (1) because: Grab invalid index :: Exception wasn't encountered.\n[Info] Check access operator :: Adjusting points possible to 13\n[Info] Check access operator [] at index 1(-48 == -48) :: Adjusting points possible to 14\n[OK] Adjusting points from 12 to 13 (1) because: Check access operator [] at index 1(-48 == -48) :: Assertion is true\n[Info] Check access operator [] at index 27(4 == 4) :: Adjusting points possible to 15\n[OK] Adjusting points from 13 to 14 (1) because: Check access operator [] at index 27(4 == 4) :: Assertion is true\n[Info] Check access operator [] at index 97(144 == 144) :: Adjusting points possible to 16\n[OK] Adjusting points from 14 to 15 (1) because: Check access operator [] at index 97(144 == 144) :: Assertion is true\n[OK] Adjusting points from 15 to 16 (1) because: Check access operator :: Exception wasn't encountered.\n[Info] Check access operator throws for index -1 :: Adjusting points possible to 17\n[OK] Adjusting points from 16 to 17 (1) because: Check access operator throws for index -1 :: Exception was encountered ==> ERROR: Index out of bounds.\n[Info] Check access operator throws for index 100 :: Adjusting points possible to 18\n[OK] Adjusting points from 17 to 18 (1) because: Check access operator throws for index 100 :: Exception was encountered ==> ERROR: Index out of bounds.\n[Info] Valid pop_back operations shouldn't throw an exception :: Adjusting points possible to 19\n[Info] Single-element vector should become empty after pop_back :: Adjusting points possible to 20\n[OK] Adjusting points from 18 to 19 (1) because: Single-element vector should become empty after pop_back :: Assertion is true\n[Info] Checking pop_back logic :: Adjusting points possible to 21\n[OK] Adjusting points from 19 to 20 (1) because: Checking pop_back logic :: Assertion is true\n[OK] Adjusting points from 20 to 21 (1) because: Valid pop_back operations shouldn't throw an exception :: Exception wasn't encountered.\n[Info] Pop back should throw on an empty vector :: Adjusting points possible to 22\n[OK] Adjusting points from 21 to 22 (1) because: Pop back should throw on an empty vector :: Exception was encountered ==> ERROR: Index out of bounds.\n",
         "score": 22
      },
      {
         "max_score": 5,
         "name": "Capacity tests",
         "output": "[Info] Instance created\n[Info] Valid capacity calls :: Adjusting points possible to 1\n[Info] Capacity should match new 2000 value(2000 == 2000) :: Adjusting points possible to 2\n[OK] Adjusting points from 0 to 1 (1) because: Capacity should match new 2000 value(2000 == 2000) :: Assertion is true\n[Info] reserve() shouldn't have corrupted vector data :: Adjusting points possible to 4\n[OK] Adjusting points from 1 to 3 (2) because: reserve() shouldn't have corrupted vector data :: Assertion is true\n[Info] reserve() requests should not result in less capacity than already held(2000 == 2000) :: Adjusting points possible to 5\n[OK] Adjusting points from 3 to 4 (1) because: reserve() requests should not result in less capacity than already held(2000 == 2000) :: Assertion is true\n[OK] Adjusting points from 4 to 5 (1) because: Valid capacity calls :: Exception wasn't encountered.\n",
         "score": 5
      },
      {
         "max_score": 7,
         "name": "Copy tests",
         "output": "[Info] Instance created\n[Info] Copy tests shouldn't throw any exceptions :: Adjusting points possible to 1\n[Info] Assignment operator (equality check) :: Adjusting points possible to 2\n[OK] Adjusting points from 0 to 1 (1) because: Assignment operator (equality check) :: Assertion is true\n[Info] Assignment operator (size) :: Adjusting points possible to 3\n[OK] Adjusting points from 1 to 2 (1) because: Assignment operator (size) :: Assertion is true\n[Info] Assignment operator (size) :: Adjusting points possible to 4\n[OK] Adjusting points from 2 to 3 (1) because: Assignment operator (size) :: Assertion is true\n[Info] Copy constructor (equality check) :: Adjusting points possible to 5\n[OK] Adjusting points from 3 to 4 (1) because: Copy constructor (equality check) :: Assertion is true\n[Info] Copy constructor (size) :: Adjusting points possible to 6\n[OK] Adjusting points from 4 to 5 (1) because: Copy constructor (size) :: Assertion is true\n[Info] Copy constructor (size) :: Adjusting points possible to 7\n[OK] Adjusting points from 5 to 6 (1) because: Copy constructor (size) :: Assertion is true\n[OK] Adjusting points from 6 to 7 (1) because: Copy tests shouldn't throw any exceptions :: Exception wasn't encountered.\n",
         "score": 7
      },
      {
         "max_score": 8,
         "name": "Deletion tests",
         "output": "[Info] Instance created\n[Info] Valid deletion tests shouldn't throw exceptions :: Adjusting points possible to 1\n[Info] Erase an element in the middle (size) :: Adjusting points possible to 2\n[OK] Adjusting points from 0 to 1 (1) because: Erase an element in the middle (size) :: Assertion is true\n[Info] Erase an element in the middle (capacity) :: Adjusting points possible to 3\n[OK] Adjusting points from 1 to 2 (1) because: Erase an element in the middle (capacity) :: Assertion is true\n[Info] Erase an element in the middle (check another element)(128 == 128) :: Adjusting points possible to 4\n[OK] Adjusting points from 2 to 3 (1) because: Erase an element in the middle (check another element)(128 == 128) :: Assertion is true\n[Info] Erase first element (size) :: Adjusting points possible to 5\n[OK] Adjusting points from 3 to 4 (1) because: Erase first element (size) :: Assertion is true\n[Info] Erase first element (capacity) :: Adjusting points possible to 6\n[OK] Adjusting points from 4 to 5 (1) because: Erase first element (capacity) :: Assertion is true\n[Info] Erase first element (check another element)(130 == 130) :: Adjusting points possible to 7\n[OK] Adjusting points from 5 to 6 (1) because: Erase first element (check another element)(130 == 130) :: Assertion is true\n[OK] Adjusting points from 6 to 7 (1) because: Valid deletion tests shouldn't throw exceptions :: Exception wasn't encountered.\n[Info] Erasing 2 elements from a 1 element vector should throw exception :: Adjusting points possible to 8\n[OK] Adjusting points from 7 to 8 (1) because: Erasing 2 elements from a 1 element vector should throw exception :: Exception was encountered ==> ERROR: Index out of bounds.\n",
         "score": 8
      },
      {
         "max_score": 3,
         "name": "Destructor tests",
         "output": "[Info] Instance created\n[Info] Vector should call element destructors when clear()ing :: Adjusting points possible to 1\n[OK] Adjusting points from 0 to 1 (1) because: Vector should call element destructors when clear()ing :: Exception was encountered ==> ERROR: Index out of bounds.\n[Info] Vector should call element destructors when erasing()ing :: Adjusting points possible to 2\n[OK] Adjusting points from 1 to 2 (1) because: Vector should call element destructors when erasing()ing :: Exception was encountered ==> ERROR: Index out of bounds.\n[Info] Vector should call element destructors when set()ing :: Adjusting points possible to 3\n[OK] Adjusting points from 2 to 3 (1) because: Vector should call element destructors when set()ing :: Exception was encountered ==> ERROR: Index out of bounds.\n",
         "score": 3
      },
      {
         "max_score": 5,
         "name": "Empty tests",
         "output": "[Info] Instance created\n[Info] empty() tests should not throw exceptions :: Adjusting points possible to 1\n[Info] empty() should work with empty vector :: Adjusting points possible to 2\n[OK] Adjusting points from 0 to 1 (1) because: empty() should work with empty vector :: Assertion is true\n[Info] empty() should not work with non-empty vector :: Adjusting points possible to 3\n[OK] Adjusting points from 1 to 2 (1) because: empty() should not work with non-empty vector :: Assertion is false\n[Info] empty() should work with empty vector (again) :: Adjusting points possible to 4\n[OK] Adjusting points from 2 to 3 (1) because: empty() should work with empty vector (again) :: Assertion is true\n[Info] empty() should work with empty vector (again) :: Adjusting points possible to 5\n[OK] Adjusting points from 3 to 4 (1) because: empty() should work with empty vector (again) :: Assertion is true\n[OK] Adjusting points from 4 to 5 (1) because: empty() tests should not throw exceptions :: Exception wasn't encountered.\n",
         "score": 5
      }
   ]
}